name: Deploy Pull Request Preview and Run Web Vitals

on:
  pull_request:
    branches:
      - master

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} | grep -o 'https://[^ ]*')
          echo "Deployment URL: $DEPLOYMENT_URL"
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

        - name: Run Lighthouse CI
          id: lhci
          run: |
            # Run Lighthouse CI and output results to a JSON file
            npx lhci autorun --collect.url=$DEPLOYMENT_URL --json > lhci-results.json

            # Extract the scores from the JSON file
            SCORES=$(node -e "
              const results = require('./lhci-results.json');
              const scores = results[0].summary;
              console.log(
                `Performance: ${scores.performance}, ` +
                `Accessibility: ${scores.accessibility}, ` +
                `Best Practices: ${scores['best-practices']}, ` +
                `SEO: ${scores.seo}, ` +
                `PWA: ${scores.pwa}`
              );
            ")

            # Output the scores for use in the next step
            echo "SCORES=$SCORES" >> $GITHUB_ENV
          env:
            LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Add Preview Link and Web Vitals to PR
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const branchName = pr.head.ref;

            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
            ### ðŸš€ Preview Deployment READY! ðŸŽ‰

            Your changes have been successfully deployed to a preview environment. Here are the details:

            | **Preview URL**     | [${process.env.DEPLOYMENT_URL}](${process.env.DEPLOYMENT_URL}) |
            | **Deployment Type** | Preview                           |
            | **Branch**          | ${branchName}                     |

            **Lighthouse Scores:**
            - **Performance:** ${process.env.SCORES.split(', ')[0]}
            - **Accessibility:** ${process.env.SCORES.split(', ')[1]}
            - **Best Practices:** ${process.env.SCORES.split(', ')[2]}
            - **SEO:** ${process.env.SCORES.split(', ')[3]}
            - **PWA:** ${process.env.SCORES.split(', ')[4]}

            **Next Steps:**
            - Review the changes on the preview URL.
            - Share the preview URL with your team for feedback.
            - Once the PR is approved, merge it!
            `,
            });
            console.log(`Comment added: ${comment.html_url}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
